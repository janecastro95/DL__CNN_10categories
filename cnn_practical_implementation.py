# -*- coding: utf-8 -*-
"""CNN practical implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gWVxVW4K_eMk84JyC-91roxzC4_LLLmr

# CNN practical implementation

### Configurações
"""

import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

from tensorflow.keras.preprocessing import image
import numpy as np

"""### Download and prepare the CIFAR10 dataset

https://www.cs.toronto.edu/%7Ekriz/cifar.html

The CIFAR-10 dataset consists of 60.000 32x32 colour images in 10 classes, with 6.000 images per class.  
There are 50.000 training images and 10.000 test images.

"""

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

#verificar se o conjunto de dados parece correto: vamos plotar as primeiras 25 imagens do conjunto de treinamento
#e exibir o nome da classe abaixo de cada imagem:

class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer',
               'dog', 'frog', 'horse', 'ship', 'truck']

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i])
    # The CIFAR labels happen to be arrays, which is why you need the extra index
    plt.xlabel(class_names[train_labels[i][0]])
plt.show()

"""### CNN training

**Feature Extraction**
"""

#Initialize the NN

model = models.Sequential()

#Add the convolutional operation layer
model.add(layers.Conv2D(filters=32,  #32 kernels/filtros
                        kernel_size=(3, 3),  #cada filtro de tamanho 3x3
                        strides=(1, 1),  #desliza uma camada por vez
                        activation='relu',
                        input_shape=(32, 32, 3) #as imagens são 32x32 pixels, com 3 camadas (R,G,B)
                        ))

#Add the maxpooling operation layer
model.add(layers.MaxPooling2D((2, 2))) #max pooling 2x2

#Add the convolutional operation layer
model.add(layers.Conv2D(64, (3, 3), activation='relu')) #64 filtros, cada filtro de tamanho 3x3

#Add the maxpooling operation layer
model.add(layers.MaxPooling2D((2, 2)))

#Add the convolutional operation layer
model.add(layers.Conv2D(64, (3, 3), activation='relu')) #64 filtros, cada filtro de tamanho 3x3

#add flatten layer
model.add(layers.Flatten())

"""**Neural Network**"""

#Add the hidden layer
model.add(layers.Dense(64, activation='relu')) #camada com 64 neurônios

#Add the output layer
model.add(layers.Dense(10)) #são 10 possíveis classificações

model.summary()
#na primeira etapa, são imagens 32x32 passando por filtro 3x3 sem padding e stride = 1; então resultado é 32-3+1 = 30 (30x30), com 32 filtros
#na segunda etapa, são imagens 30x30 passando por maxpooling 2x2; logo cabem 15 dentro das imagens, então resultado = (15x15)
#na terceira etapa, são imagens 15x15 passando por filtro 3x3 sem padding e stride = 1; então resultado é 15-3+1 = 13 (13x13), com 64 filtros
#na quarta etapa, são imagens 13x13 passando por maxpooling 2x2; logo cabem 6 dentro das imagens, então resultado = (6x6)
#na quinta etapa, são imagens 6x6 passando por filtro 3x3 sem padding e stride = 1; então resultado é 6-3+1 = 4 (4x4), com 64 filtros
#na sexta etapa, torna-se unidimensional 4x4x64 = 1024
#passa na NN por 64 neurônios
#sai na camada output com 10 probabilidades

#compile and train model

model.compile(optimizer='adam', #função de otimização
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True), #função de perda
              metrics=['accuracy']) #métrica final

modelcnn = model.fit(train_images,
                    train_labels,
                    epochs=10,
                    validation_data=(test_images, test_labels))

#Verifica ganho através das épocas
plt.plot(modelcnn.history['accuracy'], label='accuracy')
plt.plot(modelcnn.history['val_accuracy'], label = 'val_accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.ylim([0.5, 1])
plt.legend(loc='lower right')

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)

"""### Teste em novas imagens"""

img = image.load_img('images.jpg', target_size=(32, 32))  # Adjust size as needed
img

img_array = image.img_to_array(img) #Transforma imagem em tabela (narrayd)
print(img_array.shape) #imagem 32x32, RGB

img_array = np.expand_dims(img_array, axis=0) #Adiciona uma coluna, para identificar o batch de processamento (mesmo que seja só 1)
print(img_array.shape) #batch 1, imagem 32x32, RGB

img_array = img_array / 255.0  # Normalize (necessário porque foi treinado assim)
print(img_array.shape) #batch 1, imagem 32x32, RGB

predictions = model.predict(img_array) #saída com as "probabilidades"
print(predictions)

predicted_class = np.argmax(predictions, axis=1) #extrai a posição com máxima "probabilidade"
print(class_names[predicted_class[0]]) #puxa o nome da classe na posição de máxima "probabilidade"

"""### Teste nas imagens de treino"""

i=1

plt.imshow(train_images[i])

print(class_names[train_labels[i][0]]) #puxa o nome da classe real

img_array = train_images[i] #já é vetor
img_array = np.expand_dims(img_array, axis=0) #Adiciona uma coluna, para identificar o batch de processamento (mesmo que seja só 1)
print(img_array.shape) #batch 1, imagem 32x32, RGB
img_array = img_array / 255.0  # Normalize (necessário porque foi treinado assim)
print(img_array.shape) #batch 1, imagem 32x32, RGB

predictions = model.predict(img_array) #saída com as "probabilidades"
print(predictions)

predicted_class = np.argmax(predictions, axis=1) #extrai a posição com máxima "probabilidade"
print(class_names[predicted_class[0]]) #puxa o nome da classe na posição de máxima "probabilidade"